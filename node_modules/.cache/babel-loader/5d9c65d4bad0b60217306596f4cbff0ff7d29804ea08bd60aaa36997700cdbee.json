{"ast":null,"code":"var _jsxFileName = \"D:\\\\Mythri\\\\Collage\\\\SRM\\\\doctor-listing-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { API_URL } from \"./constants\";\nimport DoctorCard from \"./components/DoctorCard\";\nimport SearchBar from \"./components/SearchBar\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filteredDoctors, setFilteredDoctors] = useState([]);\n  const [consultationType, setConsultationType] = useState(null);\n  useEffect(() => {\n    fetch(API_URL).then(res => res.json()).then(data => {\n      setDoctors(data);\n      setFilteredDoctors(data);\n      setLoading(false);\n    }).catch(err => {\n      console.error(\"Error fetching data:\", err);\n      setLoading(false);\n    });\n  }, []);\n  const handleSearchChange = event => {\n    const query = event.target.value;\n    setSearchQuery(query);\n    const filtered = doctors.filter(doctor => doctor.name.toLowerCase().includes(query.toLowerCase()));\n    setFilteredDoctors(filtered);\n  };\n  const handleConsultationChange = event => {\n    setConsultationType(event.target.value);\n  };\n  useEffect(() => {\n    let filteredData = doctors;\n    if (consultationType) {\n      filteredData = filteredData.filter(doctor => doctor.consultationType === consultationType);\n    }\n    setFilteredDoctors(filteredData);\n  }, [consultationType, searchQuery, doctors]);\n\n  // Generate top 3 matching suggestions based on search query\n  const getSuggestions = () => {\n    if (!searchQuery) return [];\n    return doctors.map(doctor => doctor.name).filter(name => name.toLowerCase().includes(searchQuery.toLowerCase())).slice(0, 3); // Show only top 3 matches\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      searchQuery: searchQuery,\n      onSearchChange: handleSearchChange,\n      suggestions: getSuggestions()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilterPanel, {\n      consultationType: consultationType,\n      onConsultationTypeChange: handleConsultationChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading doctors...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: filteredDoctors.map((doc, i) => /*#__PURE__*/_jsxDEV(DoctorCard, {\n        doctor: doc\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this))\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bLK41WNdpGC0FOdF8inzVv0y940=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","API_URL","DoctorCard","SearchBar","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","doctors","setDoctors","loading","setLoading","searchQuery","setSearchQuery","filteredDoctors","setFilteredDoctors","consultationType","setConsultationType","fetch","then","res","json","data","catch","err","console","error","handleSearchChange","event","query","target","value","filtered","filter","doctor","name","toLowerCase","includes","handleConsultationChange","filteredData","getSuggestions","map","slice","className","children","onSearchChange","suggestions","fileName","_jsxFileName","lineNumber","columnNumber","FilterPanel","onConsultationTypeChange","doc","i","_c","$RefreshReg$"],"sources":["D:/Mythri/Collage/SRM/doctor-listing-app/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API_URL } from \"./constants\";\nimport DoctorCard from \"./components/DoctorCard\";\nimport SearchBar from \"./components/SearchBar\";\n\n\nfunction App() {\n  const [doctors, setDoctors] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filteredDoctors, setFilteredDoctors] = useState([]);\n  const [consultationType, setConsultationType] = useState(null);\n\n  useEffect(() => {\n    fetch(API_URL)\n      .then((res) => res.json())\n      .then((data) => {\n        setDoctors(data);\n        setFilteredDoctors(data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.error(\"Error fetching data:\", err);\n        setLoading(false);\n      });\n  }, []);\n\n  const handleSearchChange = (event) => {\n    const query = event.target.value;\n    setSearchQuery(query);\n\n    const filtered = doctors.filter((doctor) =>\n      doctor.name.toLowerCase().includes(query.toLowerCase())\n    );\n\n    setFilteredDoctors(filtered);\n  };\n\n  const handleConsultationChange = (event) => {\n    setConsultationType(event.target.value);\n  };\n\n  useEffect(() => {\n    let filteredData = doctors;\n\n    if (consultationType) {\n      filteredData = filteredData.filter(\n        (doctor) => doctor.consultationType === consultationType\n      );\n    }\n\n    setFilteredDoctors(filteredData);\n  }, [consultationType, searchQuery, doctors]);\n\n  // Generate top 3 matching suggestions based on search query\n  const getSuggestions = () => {\n    if (!searchQuery) return [];\n\n    return doctors\n      .map((doctor) => doctor.name)\n      .filter((name) => name.toLowerCase().includes(searchQuery.toLowerCase()))\n      .slice(0, 3); // Show only top 3 matches\n  };\n\n  return (\n    <div className=\"container mt-4\">\n      {/* Search Bar Component */}\n      <SearchBar\n        searchQuery={searchQuery}\n        onSearchChange={handleSearchChange}\n        suggestions={getSuggestions()}\n      />\n\n      {/* Filter Panel Component */}\n      <FilterPanel\n        consultationType={consultationType}\n        onConsultationTypeChange={handleConsultationChange}\n      />\n\n      {loading ? (\n        <p>Loading doctors...</p>\n      ) : (\n        <>\n          {filteredDoctors.map((doc, i) => (\n            <DoctorCard key={i} doctor={doc} />\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}